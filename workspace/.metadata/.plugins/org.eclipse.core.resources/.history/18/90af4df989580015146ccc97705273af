package Queue;

import java.util.Iterator;

public class Queue {
	 
    public static void main(String[] args) {
        QueueLinkedList queueList = new QueueLinkedList();
 
        // add elements to LinkedList
        queueList.enqueue("1");
        queueList.enqueue("2");
        queueList.enqueue("3");
        queueList.enqueue("4");
        queueList.enqueue("5");
 
        /*
         * Please note that primitive values can not be added into LinkedList
         * directly. They must be converted to their corresponding wrapper
         * class.
         */
        
        System.out.println(queueList.dequeue());
        System.out.println(queueList.dequeue());
        
        
        System.out.println("QueueList - print linkedlist: " + queueList);
        System.out.println("QueueList.first() - print linkedlist first: " + queueList.first());
        System.out.println("QueueList.last() - print linkedlist last: " + queueList.last());
        System.out.println("QueueList.size() - print linkedlist size: " + queueList.size());
        System.out.println("QueueList.IsEmpty() - print true if empty else false: " + queueList.isEmpty());
        System.out.println("QueueList.contains() - true if exists else false: " + queueList.contains("3"));
        System.out.println("QueueList.iterator() - print iterator: " + queueList.iterator().next());
    }
}
 
class QueueLinkedList implements QueueInterface{
    // reference to the head node.
    private Node head;
    private int listCount;
 
    // LinkedList constructor
    public QueueLinkedList() {
        // this is an empty list, so the reference to the head node
        // is set to a new node with no data
        head = new Node(null);
        listCount = 0;
    }
 
 
    public void add(Object data, int index)
    // inserts the specified element at the specified position in this list
    {
        Node crunchifyTemp = new Node(data);
        Node crunchifyCurrent = head;
        // crawl to the requested index or the last element in the list,
        // whichever comes first
        for (int i = 1; i < index && crunchifyCurrent.getNext() != null; i++) {
            crunchifyCurrent = crunchifyCurrent.getNext();
        }
        // set the new node's next-node reference to this node's next-node
        // reference
        crunchifyTemp.setNext(crunchifyCurrent.getNext());
        // now set this node's next-node reference to the new node
        crunchifyCurrent.setNext(crunchifyTemp);
        listCount++;// increment the number of elements variable
    }
 
    public Object get(int index)
    // returns the element at the specified position in this list.
    {
        // index must be 1 or higher
        if (index <= 0)
            return null;
 
        Node crunchifyCurrent = head.getNext();
        for (int i = 1; i < index; i++) {
            if (crunchifyCurrent.getNext() == null)
                return null;
 
            crunchifyCurrent = crunchifyCurrent.getNext();
        }
        return crunchifyCurrent.getData();
    }
 
    public boolean remove(int index)
    // removes the element at the specified position in this list.
    {
        // if the index is out of range, exit
        if (index < 1 || index > size())
            return false;
 
        Node crunchifyCurrent = head;
        for (int i = 1; i < index; i++) {
            if (crunchifyCurrent.getNext() == null)
                return false;
 
            crunchifyCurrent = crunchifyCurrent.getNext();
        }
        crunchifyCurrent.setNext(crunchifyCurrent.getNext().getNext());
        listCount--; // decrement the number of elements variable
        return true;
    }
 
   
 
    public String toString() {
        Node crunchifyCurrent = head.getNext();
        String output = "";
        while (crunchifyCurrent != null) {
            output += "[" + crunchifyCurrent.getData().toString() + "]";
            crunchifyCurrent = crunchifyCurrent.getNext();
        }
        return output;
    }
 
    private class Node {
        // reference to the next node in the chain,
        // or null if there isn't one.
        Node node;
        // data carried by this node.
        // could be of any type you need.
        Object data;
 
        // Node constructor
        public Node(Object dataValue) {
            node = null;
            data = dataValue;
        }
 
        // another Node constructor if we want to
        // specify the node to point to.
        public Node(Object dataValue, Node nextValue) {
            node = nextValue;
            data = dataValue;
        }
 
        // these methods should be self-explanatory
        public Object getData() {
            return data;
        }
 
        public void setData(Object dataValue) {
            data = dataValue;
        }
 
        public Node getNext() {
            return node;
        }
 
        public void setNext(Node nextValue) {
            node = nextValue;
        }
    }

    
    @Override
    public int size()
    {
    	return listCount;
    }
    
	@Override
	public boolean isEmpty() {
		Node queueCurr = head;
		
		if(queueCurr.getNext() == null)
		{
			return true;
		}
		
		return false;
	}

	@Override
	public void enqueue(Object element) {
		
		    Node queueTemp = new Node(element);
	        Node queueCurr = head;
	        // starting at the head node, crawl to the end of the list
	        while (queueCurr.getNext() != null) {
	        	queueCurr = queueCurr.getNext();
	        }
	        // the last node's "next" reference set to our new node
	        queueCurr.setNext(queueTemp);
	        listCount++;// increment the number of elements variable
	    
		
	}

	@Override
	public Object dequeue() throws IndexOutOfBoundsException {
		
		Node queueCurr = head;
		
		Node queueTemp = queueCurr.getNext();
		
		
		queueCurr.setNext(queueTemp.getNext());
		listCount--;
		
		
		
		return queueTemp.getData();
	}

	@Override
	public Object first() throws IndexOutOfBoundsException {
		
		Node currenthead = head;
		currenthead.getNext();
		
		return currenthead.getNext().getData();
	}

	@Override
	public Object last() throws IndexOutOfBoundsException {
		
		
        Node queueCurr = head;
        // starting at the head node, crawl to the end of the list
        while (queueCurr.getNext() != null) {
        	queueCurr = queueCurr.getNext();
        }
        // the last node's "next" reference set to our new node
        queueCurr.getNext();
		
		return queueCurr.getData();
	}

	@Override
	public boolean contains(Object o) {
		
		
		Node queueCurr = head;
		 while (queueCurr.getNext() != null) {
			if(queueCurr.getNext().getData() ==o)
			{
				return true;
			}
			
		 }
		 return false;
	}


	@Override
	public Iterator iterator() {
		
		
		return new Iterator(){

			@Override
			public boolean hasNext() {
				Node queueCurr = head;
				if(queueCurr.getNext() != null)
				{
					return true;
				}
				
				return false;
			}

			@Override
			public Object next() {
				Node queueCurr = head;
				queueCurr = queueCurr.getNext();
				return queueCurr.getNext().getData();
			}};
			
			
				
			
	


	
	}
	
	


	
	


	
	
	
	

	

	
}