package Exercise1;

public class ArrayIntStack extends AbstractIntCollection implements IntStack {
	//add method
	@Override
	public void push(int n) {
		//if length less than size or equal then resize.
		if(values.length <= size)
		{
			resize();
		}
		//if length bigger than size then put in value and and increase size with 1.
		if(values.length > size)
		{
			values[size++] = n;
		}
		
			
		
	}

	@Override
	public int pop() {
		//takes out the last value that is not equal to 0
		int tmp = values[size-1];
		//sets value to 0
		values[size-1] = 0; 
		//decrease size with 1
		size =size-1;
		//copy array and put size value last
		System.arraycopy(values,size+1,values,size,values.length-1-size);
		//make temp array with decreased length with 1
		int[] tmparr = new int[values.length-1];
		//copy values t
		System.arraycopy(values,0,tmparr,0,values.length-1); 
		values = tmparr;
		
		return tmp;
	}

	@Override
	public int peek() {
		
		return values[size-1];
	}

}
