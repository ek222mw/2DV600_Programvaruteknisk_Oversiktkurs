package Exercise5;

import java.util.Iterator;

public class TreeWordSet implements WordSet {
	
	private BST root = null;
	private int size;
	private int count;
	private boolean l = true;
	private boolean r = true;
	
	@Override
	public Iterator iterator() {
		
		return new SetIterator();
	}

	@Override
	public void add(Word word) {
		if (root==null) 
			root = new BST(word);
		else
		{
			root.add(word);
		}
		size++;
		
	}
	
	public BST getRoot()
	{
		return root;
	}

	@Override
	public boolean contains(Word word) {
		if (root==null) 
			return false;
		else
			return root.contains(word);
	}

	@Override
	public int size() {
		
		return size;
	}
	
	
	private class BST {
		Word value;
		BST left = null;
		BST right = null;
		BST parent = null;
		
		BST(Word val) {
			value = val;
		}
		
		void add(Word word) {
			// adding to left side
			if (word.compareTo(value) <0) {  
				if (left == null)
				{
					left = new BST(word);
				}
				else
				{
					left.add(word);
				}
			}
			// adding to right side
			else if (word.compareTo(value)> 0) { 
				if (right == null)
				{
					right = new BST(word);	
				}
				else
				{
					right.add(word);
				}
					
			}
		}
		
		boolean contains(Word word) {
			//searching on left side
			if (word.compareTo(value)< 0) { 
				if (left == null)
					return false;
				else
					return left.contains(word);
			}
			 // searching on right side
			else if (word.compareTo(value)> 0) {
				if (right == null)
					return false;
				else
					return right.contains(word);
			}
			
			return true;  
		}
		
		
		
		Word next() {
			
			
			
			       BST next = getRoot();
			       BST r = next;
			
					if (right != null)
					{
						next = next.right;
						while(next.right != null)
							next = next.left;
						return r.value;
					}else while(true){
					       if(next.parent == null){
						         next = null;
						         return r.value;
						       }
						       if(next.parent.left == next){
						         next = next.parent;
						         return r.value;
						       }
						       next = next.parent;
						
				
			
			
			return next.value;
			
		}
	}
	private class SetIterator implements Iterator<Word> {

		
		public SetIterator()
		{
			
		}
		
		@Override
		public boolean hasNext() {
			count++;
				
				if(count<=size)
				{
					return true;
				}
				
				
			
			return false;
			
			
		}

		@Override
		public Word next() {
			
			return root.next();
			
		}
		
	}
	
	
	
	

}
