package Exercise5;

public class ArrayIntStack extends AbstractIntCollection implements IntStack {
	//add method
	@Override
	public void push(Object n) {
		//if length less than size or equal then resize.
		if(values.length <= size)
		{
			resize();
		}
		//if length bigger than size then put in value and and increase size with 1.
		if(values.length > size)
		{
			values[size++] = n;
		}
		
			
		
	}
	//remove method.
	@Override
	public Object pop() {
		//takes out the top of stack value that is not equal to 0
		Object tmp = values[size-1];
		//sets value to 0
		values[size-1] = 0; 
		//decrease size with 1
		size =size-1;
		//copy array and put size value at top of the stack.
		System.arraycopy(values,size+1,values,size,values.length-1-size);
		//make temp array with decreased length with 1
		Object[] tmparr = new Object[values.length-1];
		//copy values
		System.arraycopy(values,0,tmparr,0,values.length-1);
		//cut length on old array with 1
		values = tmparr;
		//return erased value.
		return tmp;
	}
	//peek method
	@Override
	public Object peek() {
		//return the top of stack
		return values[size-1];
	}

}
