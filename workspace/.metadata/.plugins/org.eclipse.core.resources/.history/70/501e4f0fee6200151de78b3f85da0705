package Exercise5;

import java.util.Iterator;

public class HashWordSet implements WordSet {

	private int sz;
	private Node[] buckets = new Node[3];
	
	public static void main(String[] args)
	{
		
	}
	
	@Override
	public Iterator iterator() {
		
		int pos = 0;
		Node[] nArr;
		
		/* Collect all strings */
		nArr = new Node[sz];
		int n = 0;
		for (int i=0;i<buckets.length;i++) {
			Node node = buckets[i];
			while (node != null) {
				nArr[n++] = node;
				node = node.next;
			}
		}
		
		
		return new Iterator(){

			@Override
			public boolean hasNext() {
				// TODO Auto-generated method stub
				return false;
			}

			@Override
			public Object next() {
				// TODO Auto-generated method stub
				return null;
			}};
	}

	@Override
	public void add(Word word) {
		
		int pos = getBucketNumber(word);  
		Node node = buckets[pos];
		
		while (node != null) {
			if (node.value.equals(word))   					
				return;
			else 
				node = node.next;
		}
		/* Not found, add new node as first entry */
		node = new Node(word);
		node.next = buckets[pos];
		buckets[pos] = node;
		sz++;
		
		if (sz == buckets.length)
			rehash();
		
	}
	
	private class Node {
		Word value;
		Node next = null;
		
		public Node (Word str) { value = str;	}
		
		public String toString() {return value.toString();}		
	}
	
	private void rehash() {
		Node[] temp = buckets;  // Copy of old buckets
		buckets = new Node[2*temp.length];  // New empty buckets
		sz = 0;
		for (Node n : temp) {   // Insert old values into new buckets
			if (n == null) continue;
			while (n != null) {
				add(n.value);
				n = n.next;
			}
		}
	}
	
	private int getBucketNumber(Word w) {
		int hash = w.hashCode();
		if (hash < 0)
			hash = -hash;
		return hash % buckets.length;	
	}

	@Override
	public boolean contains(Word word) {
		int pos = getBucketNumber(word);
		Node node = buckets[pos];
		
		while (node != null) {
			if (node.value.equals(word))   					
				return true;    // Found!
			else 
				node = node.next;
		}
		
		return false;
	}

	@Override
	public int size() {
	
		return sz;
	}

}
