package Exercise5;

import Exercise5.TreeWordSet.BST;

public class ArrayBSTStack extends AbstractBSTCollection implements BSTStack {
	//add method
	@Override
	public void push(BST n) {
		//if length less than size or equal then resize.
		if(bst_vals.length == size)
		{
			resize();
		}
		//if length bigger than size then put in value and and increase size with 1.
		if(bst_vals.length > size)
		{
			bst_vals[size++] = n;
		}
		
			
		
	}
	//remove method.
	@Override
	public BST pop() {
		//takes out the top of stack value that is not equal to 0
		BST tmp = bst_vals[size-1];
		//bst_vals[size-1].value = new Word("0"); 
		//decrease size with 1
		size =size-1;
		//copy array and put size value at top of the stack.
		System.arraycopy(bst_vals,size+1,bst_vals,size,bst_vals.length-1-size);
		//make temp array with decreased length with 1
		BST[] tmparr = new BST[bst_vals.length-1];
		//copy values
		System.arraycopy(bst_vals,0,tmparr,0,bst_vals.length-1);
		//cut length on old array with 1
		bst_vals = tmparr;
		//return erased value.
		return tmp;
	}
	//peek method
	@Override
	public BST peek() {
		//return the top of stack
		return bst_vals[size-1];
	}

}
