package Exercise5;

import java.util.Iterator;

public class TreeWordSet implements WordSet {
	
	private BST root = null;
	private int size;
	private int count;
	private boolean l = true;
	private boolean r = true;
	
	@Override
	public Iterator iterator() {
		
		return new SetIterator();
	}

	@Override
	public void add(Word word) {
		if (root==null) 
			root = new BST(word);
		else
		{
			root.add(word);
		}
		size++;
		
	}
	
	public BST getRoot()
	{
		return root;
	}

	@Override
	public boolean contains(Word word) {
		if (root==null) 
			return false;
		else
			return root.contains(word);
	}

	@Override
	public int size() {
		
		return size;
	}
	
	
	public class BST {
		Word value;
		BST left = null;
		BST right = null;
		
		BST(Word val) {
			value = val;
		}
		
		void add(Word word) {
			// adding to left side
			if (word.compareTo(value) <0) {  
				if (left == null)
				{
					left = new BST(word);
				}
				else
				{
					left.add(word);
				}
			}
			// adding to right side
			else if (word.compareTo(value)> 0) { 
				if (right == null)
				{
					right = new BST(word);	
				}
				else
				{
					right.add(word);
				}
					
			}
		}
		
		boolean contains(Word word) {
			//searching on left side
			if (word.compareTo(value)< 0) { 
				if (left == null)
					return false;
				else
					return left.contains(word);
			}
			 // searching on right side
			else if (word.compareTo(value)> 0) {
				if (right == null)
					return false;
				else
					return right.contains(word);
			}
			
			return true;  
		}
		
	}
	private class SetIterator implements Iterator<Word> {
		
		 private ArrayIntStack NodeStack = new ArrayIntStack( );
		 boolean b = true;
		public SetIterator()
		{
			 if (root != null) {
		            NodeStack.push(root);
		     }
		}
		
		@Override
		public boolean hasNext() {
			
			
			return !NodeStack.isEmpty();
			
			
		}

		@Override
		public Word next() {
			
		 	if (!hasNext ( )) {
	            try {
					throw new Exception("tree is out of elements");
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	        }
		 	
	        BST node = NodeStack.pop();
	        if(b)
	        {
	        	if (node.left != null) {
		            NodeStack.push (node.left);
		        }
	        	 else{
	 	        	b=false;
	 	        	next();
	 	        }
	        }
	        
	       // if (node.right != null) {
	         //   NodeStack.push (node.right);
	       // }
	        //else{
	        	//b=false;
	        	//next();
	        }
	        
	        
	        return node.value;
			
		}
		
	}
	
	

}
